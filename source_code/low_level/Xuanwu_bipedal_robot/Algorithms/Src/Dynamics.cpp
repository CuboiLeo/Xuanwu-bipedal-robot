#include "Dynamics.h"
#include "Eigen/Dense"

Dynamics::Dynamics()
{
    CoM_center_part = {0.0f, 0.0f, COM_CENTER_Z_OFFSET};
    CoM_left_hip_roll_part = {0.0f, 0.0f, 0.0f};
    CoM_left_hip_pitch_part = {0.0f, 0.0f, 0.0f};
    CoM_left_knee_pitch_part = {0.0f, 0.0f, 0.0f};
    CoM_left_foot_part = {0.0f, 0.0f, 0.0f};
    CoM_right_hip_roll_part = {0.0f, 0.0f, 0.0f};
    CoM_right_hip_pitch_part = {0.0f, 0.0f, 0.0f};
    CoM_right_knee_pitch_part = {0.0f, 0.0f, 0.0f};
    CoM_right_foot_part = {0.0f, 0.0f, 0.0f};
    CoM_body_frame = {0.0f, 0.0f, 0.0f};
    CoM_world_frame = {0.0f, 0.0f, 0.0f};
    CoM_accel_body_frame = {0.0f, 0.0f, 0.0f};
    CoM_accel_world_frame = {0.0f, 0.0f, 0.0f};
    ZMP_world_frame = {0.0f, 0.0f, 0.0f};
}

Direction_Vector Dynamics::computeCenterOfMass(const Joint_Angle &joint_angles_left, const Joint_Angle &joint_angles_right, const FusionMatrix &rotation_matrix)
{
    // Compute the center of mass of the left leg parts
    CoM_left_hip_roll_part.x = DH_Left_Leg[0].a + (DH_Left_Leg[1].a + COM_HIP_ROLL_X_OFFSET) * cos(joint_angles_left.hip_yaw);
    CoM_left_hip_roll_part.y = (DH_Left_Leg[1].a + COM_HIP_ROLL_X_OFFSET) * sin(joint_angles_left.hip_yaw);
    CoM_left_hip_roll_part.z = 0.0f;
    CoM_left_hip_pitch_part.x = DH_Left_Leg[0].a + (DH_Left_Leg[2].a + COM_HIP_PITCH_Z_OFFSET) * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + DH_Left_Leg[1].a * cos(joint_angles_left.hip_yaw);
    CoM_left_hip_pitch_part.y = (DH_Left_Leg[2].a + COM_HIP_PITCH_Z_OFFSET) * (cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + DH_Left_Leg[1].a * sin(joint_angles_left.hip_yaw);
    CoM_left_hip_pitch_part.z = (DH_Left_Leg[2].a + COM_HIP_PITCH_Z_OFFSET) * sin(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_roll);
    CoM_left_knee_pitch_part.x = DH_Left_Leg[0].a + (DH_Left_Leg[3].a + COM_KNEE_PITCH_Z_OFFSET) * (cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) - cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw)) + sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_pitch)) + DH_Left_Leg[2].a * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + DH_Left_Leg[1].a * cos(joint_angles_left.hip_yaw);
    CoM_left_knee_pitch_part.y = DH_Left_Leg[2].a * (cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + DH_Left_Leg[1].a * sin(joint_angles_left.hip_yaw) - (DH_Left_Leg[3].a + COM_KNEE_PITCH_Z_OFFSET) * (cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll)) - cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_pitch));
    CoM_left_knee_pitch_part.z = (DH_Left_Leg[3].a + COM_KNEE_PITCH_Z_OFFSET) * (cos(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) + sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_pitch) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[2].alpha) * sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_pitch)) + DH_Left_Leg[2].a * sin(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_roll);
    CoM_left_foot_part.x = DH_Left_Leg[0].a + DH_Left_Leg[3].a * (cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) - cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw)) + sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_pitch)) + (DH_Left_Leg[4].a + COM_FOOT_Z_OFFSET) * (cos(joint_angles_left.knee_pitch) * (cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) - cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw)) + sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_pitch)) - sin(joint_angles_left.knee_pitch) * (sin(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + cos(DH_Left_Leg[2].alpha) * cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw)) - sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * cos(joint_angles_left.hip_pitch) * sin(joint_angles_left.hip_yaw))) + DH_Left_Leg[2].a * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + DH_Left_Leg[1].a * cos(joint_angles_left.hip_yaw);
    CoM_left_foot_part.y = DH_Left_Leg[2].a * (cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + DH_Left_Leg[1].a * sin(joint_angles_left.hip_yaw) - DH_Left_Leg[3].a * (cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll)) - cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) + sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_pitch)) + (DH_Left_Leg[4].a + COM_FOOT_Z_OFFSET) * cos(joint_angles_left.knee_pitch) * (cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll)) + cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) - sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_pitch) - sin(joint_angles_left.knee_pitch) * (cos(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * cos(joint_angles_left.hip_roll) - cos(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll)) - cos(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) * (cos(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_yaw)) + sin(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_yaw) * sin(joint_angles_left.hip_pitch)));
    CoM_left_foot_part.z = (DH_Left_Leg[4].a + COM_FOOT_Z_OFFSET) * (cos(joint_angles_left.knee_pitch) * (cos(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) + sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_pitch) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[2].alpha) * sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_pitch)) + sin(joint_angles_left.knee_pitch) * (cos(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * cos(joint_angles_left.hip_pitch) - sin(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_pitch) + cos(DH_Left_Leg[2].alpha) * sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * cos(joint_angles_left.hip_pitch))) + DH_Left_Leg[3].a * (cos(DH_Left_Leg[1].alpha) * sin(DH_Left_Leg[2].alpha) * sin(joint_angles_left.hip_pitch) + sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_pitch) * sin(joint_angles_left.hip_roll) + cos(DH_Left_Leg[2].alpha) * sin(DH_Left_Leg[1].alpha) * cos(joint_angles_left.hip_roll) * sin(joint_angles_left.hip_pitch)) + DH_Left_Leg[2].a * sin(DH_Left_Leg[1].alpha) * sin(joint_angles_left.hip_roll);

    // Compute the center of mass of the right leg parts
    CoM_right_hip_roll_part.x = DH_Right_Leg[0].a + (DH_Right_Leg[1].a - COM_HIP_ROLL_X_OFFSET) * cos(joint_angles_right.hip_yaw);
    CoM_right_hip_roll_part.y = (DH_Right_Leg[1].a - COM_HIP_ROLL_X_OFFSET) * sin(joint_angles_right.hip_yaw);
    CoM_right_hip_roll_part.z = 0.0f;
    CoM_right_hip_pitch_part.x = DH_Right_Leg[0].a + (DH_Right_Leg[2].a + COM_HIP_PITCH_Z_OFFSET) * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + DH_Right_Leg[1].a * cos(joint_angles_right.hip_yaw);
    CoM_right_hip_pitch_part.y = (DH_Right_Leg[2].a + COM_HIP_PITCH_Z_OFFSET) * (cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + DH_Right_Leg[1].a * sin(joint_angles_right.hip_yaw);
    CoM_right_hip_pitch_part.z = (DH_Right_Leg[2].a + COM_HIP_PITCH_Z_OFFSET) * sin(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_roll);
    CoM_right_knee_pitch_part.x = DH_Right_Leg[0].a + (DH_Right_Leg[3].a + COM_KNEE_PITCH_Z_OFFSET) * (cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) - cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw)) + sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_pitch)) + DH_Right_Leg[2].a * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + DH_Right_Leg[1].a * cos(joint_angles_right.hip_yaw);
    CoM_right_knee_pitch_part.y = DH_Right_Leg[2].a * (cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + DH_Right_Leg[1].a * sin(joint_angles_right.hip_yaw) - (DH_Right_Leg[3].a + COM_KNEE_PITCH_Z_OFFSET) * (cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll)) - cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_pitch));
    CoM_right_knee_pitch_part.z = (DH_Right_Leg[3].a + COM_KNEE_PITCH_Z_OFFSET) * (cos(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) + sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_pitch) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[2].alpha) * sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_pitch)) + DH_Right_Leg[2].a * sin(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_roll);
    CoM_right_foot_part.x = DH_Right_Leg[0].a + DH_Right_Leg[3].a * (cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) - cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw)) + sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_pitch)) + (DH_Right_Leg[4].a + COM_FOOT_Z_OFFSET) * (cos(joint_angles_right.knee_pitch) * (cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) - cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw)) + sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_pitch)) - sin(joint_angles_right.knee_pitch) * (sin(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + cos(DH_Right_Leg[2].alpha) * cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw)) - sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * cos(joint_angles_right.hip_pitch) * sin(joint_angles_right.hip_yaw))) + DH_Right_Leg[2].a * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + DH_Right_Leg[1].a * cos(joint_angles_right.hip_yaw);
    CoM_right_foot_part.y = DH_Right_Leg[2].a * (cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + DH_Right_Leg[1].a * sin(joint_angles_right.hip_yaw) - DH_Right_Leg[3].a * (cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll)) - cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) + sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_pitch)) + (DH_Right_Leg[4].a + COM_FOOT_Z_OFFSET) * cos(joint_angles_right.knee_pitch) * (cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll)) + cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) - sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_pitch) - sin(joint_angles_right.knee_pitch) * (cos(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * cos(joint_angles_right.hip_roll) - cos(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll)) - cos(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) * (cos(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_yaw)) + sin(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_yaw) * sin(joint_angles_right.hip_pitch)));
    CoM_right_foot_part.z = (DH_Right_Leg[4].a + COM_FOOT_Z_OFFSET) * (cos(joint_angles_right.knee_pitch) * (cos(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) + sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_pitch) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[2].alpha) * sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_pitch)) + sin(joint_angles_right.knee_pitch) * (cos(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * cos(joint_angles_right.hip_pitch) - sin(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_pitch) + cos(DH_Right_Leg[2].alpha) * sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * cos(joint_angles_right.hip_pitch))) + DH_Right_Leg[3].a * (cos(DH_Right_Leg[1].alpha) * sin(DH_Right_Leg[2].alpha) * sin(joint_angles_right.hip_pitch) + sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_pitch) * sin(joint_angles_right.hip_roll) + cos(DH_Right_Leg[2].alpha) * sin(DH_Right_Leg[1].alpha) * cos(joint_angles_right.hip_roll) * sin(joint_angles_right.hip_pitch)) + DH_Right_Leg[2].a * sin(DH_Right_Leg[1].alpha) * sin(joint_angles_right.hip_roll);

    // Compute the center of mass of the robot
    CoM_body_frame.x = (CoM_center_part.x * MASS_CENTER_PART + CoM_left_hip_roll_part.x * MASS_HIP_ROLL_PART + CoM_left_hip_pitch_part.x * MASS_HIP_PITCH_PART + CoM_left_knee_pitch_part.x * MASS_KNEE_PITCH_PART + CoM_left_foot_part.x * MASS_FOOT_PART + CoM_right_hip_roll_part.x * MASS_HIP_ROLL_PART + CoM_right_hip_pitch_part.x * MASS_HIP_PITCH_PART + CoM_right_knee_pitch_part.x * MASS_KNEE_PITCH_PART + CoM_right_foot_part.x * MASS_FOOT_PART) / (MASS_CENTER_PART + 2 * MASS_HIP_ROLL_PART + 2 * MASS_HIP_PITCH_PART + 2 * MASS_KNEE_PITCH_PART + 2 * MASS_FOOT_PART);
    CoM_body_frame.y = (CoM_center_part.y * MASS_CENTER_PART + CoM_left_hip_roll_part.y * MASS_HIP_ROLL_PART + CoM_left_hip_pitch_part.y * MASS_HIP_PITCH_PART + CoM_left_knee_pitch_part.y * MASS_KNEE_PITCH_PART + CoM_left_foot_part.y * MASS_FOOT_PART + CoM_right_hip_roll_part.y * MASS_HIP_ROLL_PART + CoM_right_hip_pitch_part.y * MASS_HIP_PITCH_PART + CoM_right_knee_pitch_part.y * MASS_KNEE_PITCH_PART + CoM_right_foot_part.y * MASS_FOOT_PART) / (MASS_CENTER_PART + 2 * MASS_HIP_ROLL_PART + 2 * MASS_HIP_PITCH_PART + 2 * MASS_KNEE_PITCH_PART + 2 * MASS_FOOT_PART);
    CoM_body_frame.z = (CoM_center_part.z * MASS_CENTER_PART + CoM_left_hip_roll_part.z * MASS_HIP_ROLL_PART + CoM_left_hip_pitch_part.z * MASS_HIP_PITCH_PART + CoM_left_knee_pitch_part.z * MASS_KNEE_PITCH_PART + CoM_left_foot_part.z * MASS_FOOT_PART + CoM_right_hip_roll_part.z * MASS_HIP_ROLL_PART + CoM_right_hip_pitch_part.z * MASS_HIP_PITCH_PART + CoM_right_knee_pitch_part.z * MASS_KNEE_PITCH_PART + CoM_right_foot_part.z * MASS_FOOT_PART) / (MASS_CENTER_PART + 2 * MASS_HIP_ROLL_PART + 2 * MASS_HIP_PITCH_PART + 2 * MASS_KNEE_PITCH_PART + 2 * MASS_FOOT_PART);

    // Rotate the center of mass of the robot from body frame to world frame
    CoM_world_frame.y = -(CoM_body_frame.x * rotation_matrix.array[0][0] + CoM_body_frame.y * rotation_matrix.array[0][1] + CoM_body_frame.z * rotation_matrix.array[0][2]);
    CoM_world_frame.x = -(CoM_body_frame.x * rotation_matrix.array[1][0] + CoM_body_frame.y * rotation_matrix.array[1][1] + CoM_body_frame.z * rotation_matrix.array[1][2]);
    CoM_world_frame.z = CoM_body_frame.x * rotation_matrix.array[2][0] + CoM_body_frame.y * rotation_matrix.array[2][1] + CoM_body_frame.z * rotation_matrix.array[2][2];

    return CoM_world_frame;
}

Direction_Vector Dynamics::computeZeroMomentPoint(const FusionVector &accel, const FusionVector &gyro, const FusionVector &gyro_dot, const FusionMatrix &rotation_matrix)
{
    // Compute the CoM acceleration of the robot using IMU acceleration
    Eigen::Vector3f v_CoM_accel_body_frame = {CoM_accel_body_frame.x, CoM_accel_body_frame.y, CoM_accel_body_frame.z};
    Eigen::Vector3f v_IMU_accel = {accel.axis.x, accel.axis.y, accel.axis.z};
    Eigen::Vector3f v_IMU_gyro = {gyro.axis.x, gyro.axis.y, gyro.axis.z};
    Eigen::Vector3f v_IMU_gyro_dot = {gyro_dot.axis.x, gyro_dot.axis.y, gyro_dot.axis.z};
    Eigen::Vector3f v_CoM_to_IMU = {CoM_body_frame.x, CoM_body_frame.y, CoM_body_frame.z};
    v_CoM_accel_body_frame = v_IMU_accel + v_IMU_gyro_dot.cross(v_CoM_to_IMU) + v_IMU_gyro.cross(v_IMU_gyro.cross(v_CoM_to_IMU));
    CoM_accel_body_frame = {v_CoM_accel_body_frame(0), v_CoM_accel_body_frame(1), v_CoM_accel_body_frame(2)};

    // Rotate the CoM acceleration from body frame to world frame
    Eigen::Matrix3f m_rotation_matrix;
    m_rotation_matrix << rotation_matrix.array[0][0], rotation_matrix.array[0][1], rotation_matrix.array[0][2],
        rotation_matrix.array[1][0], rotation_matrix.array[1][1], rotation_matrix.array[1][2],
        rotation_matrix.array[2][0], rotation_matrix.array[2][1], rotation_matrix.array[2][2];
    Eigen::Vector3f v_CoM_accel_world_frame = m_rotation_matrix * v_CoM_accel_body_frame;
    CoM_accel_world_frame = {v_CoM_accel_world_frame(0), v_CoM_accel_world_frame(1), v_CoM_accel_world_frame(2)};
    
    // Compute the zero moment point of the robot
    ZMP_world_frame.x = CoM_world_frame.x - ((-ROBOT_HEIGHT+CoM_world_frame.z) / GRAVITY) * CoM_accel_world_frame.x;
    ZMP_world_frame.y = CoM_world_frame.y - ((-ROBOT_HEIGHT+CoM_world_frame.z) / GRAVITY) * CoM_accel_world_frame.y;
    ZMP_world_frame.z = 0.0f;

    return ZMP_world_frame;
}