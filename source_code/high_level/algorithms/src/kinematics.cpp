#include "kinematics.h"
#include "Eigen/Dense"
#include "Eigen/unsupported/Eigen/MatrixFunctions"
#include <cmath>

Position Kinematics::computeCoMPos(const Joint_Angles_Two_Legs &joint_angles, const Eigen::Matrix3d &rotation_matrix)
{
      Position CoM_body_frame;
      Position CoM_world_frame;
      // Compute the center of mass of the robot in the body frame
      CoM_body_frame.x = (1/MT)*(C1.x*M1 + (C3.y - L3)*M3*sin(joint_angles.left.hip_yaw) + C4.y*M4*cos(joint_angles.left.hip_pitch)*sin(joint_angles.left.hip_yaw) + M2*(-L1 + C2.x*cos(joint_angles.left.hip_yaw) + C2.y*sin(joint_angles.left.hip_yaw)) + M3*cos(joint_angles.left.hip_yaw)*(C3.x*cos(joint_angles.left.hip_roll) + C3.z*sin(joint_angles.left.hip_roll)) - C4.z*M4*sin(joint_angles.left.hip_yaw)*sin(joint_angles.left.hip_pitch) + L4*M5*sin(joint_angles.left.hip_yaw)*sin(joint_angles.left.hip_pitch) - C5.z*M5*cos(joint_angles.left.knee_pitch)*sin(joint_angles.left.hip_yaw)*sin(joint_angles.left.hip_pitch) + M4*cos(joint_angles.left.hip_yaw)*(C4.x*cos(joint_angles.left.hip_roll) + sin(joint_angles.left.hip_roll)*(C4.z*cos(joint_angles.left.hip_pitch) + C4.y*sin(joint_angles.left.hip_pitch))) - C5.y*M5*sin(joint_angles.left.hip_yaw)*sin(joint_angles.left.hip_pitch)*sin(joint_angles.left.knee_pitch) + M5*cos(joint_angles.left.hip_pitch)*sin(joint_angles.left.hip_yaw)*(C5.y*cos(joint_angles.left.knee_pitch) - C5.z*sin(joint_angles.left.knee_pitch)) + M5*cos(joint_angles.left.hip_yaw)*(C5.x*cos(joint_angles.left.hip_roll) + sin(joint_angles.left.hip_roll)*((-L4)*cos(joint_angles.left.hip_pitch) + C5.z*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) + C5.y*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch))) + M6*cos(joint_angles.left.hip_yaw)*(C6.x*cos(joint_angles.left.hip_roll) + sin(joint_angles.left.hip_roll)*((-L4)*cos(joint_angles.left.hip_pitch) - L5*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) + C6.z*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch) + C6.y*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch))) + (1.0/2.0)*M6*(-2*L1 + L4*cos(joint_angles.left.hip_yaw - joint_angles.left.hip_pitch) - L4*cos(joint_angles.left.hip_yaw + joint_angles.left.hip_pitch) + L5*cos(joint_angles.left.hip_yaw - joint_angles.left.hip_pitch - joint_angles.left.knee_pitch) - L5*cos(joint_angles.left.hip_yaw + joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) - C6.z*cos(joint_angles.left.hip_yaw - joint_angles.left.hip_pitch - joint_angles.left.knee_pitch - joint_angles.left.ankle_pitch) + C6.z*cos(joint_angles.left.hip_yaw + joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch) + C6.y*sin(joint_angles.left.hip_yaw - joint_angles.left.hip_pitch - joint_angles.left.knee_pitch - joint_angles.left.ankle_pitch) + C6.y*sin(joint_angles.left.hip_yaw + joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch)) + (C3.y - L3)*M3*sin(joint_angles.right.hip_yaw) + C4.y*M4*cos(joint_angles.right.hip_pitch)*sin(joint_angles.right.hip_yaw) + M2*(L1 - C2.x*cos(joint_angles.right.hip_yaw) + C2.y*sin(joint_angles.right.hip_yaw)) + M3*cos(joint_angles.right.hip_yaw)*(C3.x*cos(joint_angles.right.hip_roll) + C3.z*sin(joint_angles.right.hip_roll)) - C4.z*M4*sin(joint_angles.right.hip_yaw)*sin(joint_angles.right.hip_pitch) + L4*M5*sin(joint_angles.right.hip_yaw)*sin(joint_angles.right.hip_pitch) - C5.z*M5*cos(joint_angles.right.knee_pitch)*sin(joint_angles.right.hip_yaw)*sin(joint_angles.right.hip_pitch) + M4*cos(joint_angles.right.hip_yaw)*(C4.x*cos(joint_angles.right.hip_roll) + sin(joint_angles.right.hip_roll)*(C4.z*cos(joint_angles.right.hip_pitch) + C4.y*sin(joint_angles.right.hip_pitch))) - C5.y*M5*sin(joint_angles.right.hip_yaw)*sin(joint_angles.right.hip_pitch)*sin(joint_angles.right.knee_pitch) + M5*cos(joint_angles.right.hip_pitch)*sin(joint_angles.right.hip_yaw)*(C5.y*cos(joint_angles.right.knee_pitch) - C5.z*sin(joint_angles.right.knee_pitch)) + M5*cos(joint_angles.right.hip_yaw)*(C5.x*cos(joint_angles.right.hip_roll) + sin(joint_angles.right.hip_roll)*((-L4)*cos(joint_angles.right.hip_pitch) + C5.z*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C5.y*sin(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch))) + M6*cos(joint_angles.right.hip_yaw)*(C6.x*cos(joint_angles.right.hip_roll) + sin(joint_angles.right.hip_roll)*((-L4)*cos(joint_angles.right.hip_pitch) - L5*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C6.z*cos(joint_angles.right.ankle_pitch + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C6.y*sin(joint_angles.right.ankle_pitch + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch))) + (1.0/2.0)*M6*(2*L1 + L4*cos(joint_angles.right.hip_yaw - joint_angles.right.hip_pitch) - L4*cos(joint_angles.right.hip_yaw + joint_angles.right.hip_pitch) + L5*cos(joint_angles.right.hip_yaw - joint_angles.right.hip_pitch - joint_angles.right.knee_pitch) - C6.z*cos(joint_angles.right.ankle_pitch - joint_angles.right.hip_yaw + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) - L5*cos(joint_angles.right.hip_yaw + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C6.z*cos(joint_angles.right.ankle_pitch + joint_angles.right.hip_yaw + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) - C6.y*sin(joint_angles.right.ankle_pitch - joint_angles.right.hip_yaw + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C6.y*sin(joint_angles.right.ankle_pitch + joint_angles.right.hip_yaw + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch)));
      CoM_body_frame.y = (1/MT)*(C1.y*M1 + (C3.y - L3)*M3*cos(joint_angles.left.hip_yaw) + (C3.y - L3)*M3*cos(joint_angles.right.hip_yaw) + M2*(C2.y*cos(joint_angles.left.hip_yaw) - C2.x*sin(joint_angles.left.hip_yaw)) - M3*sin(joint_angles.left.hip_yaw)*(C3.x*cos(joint_angles.left.hip_roll) + C3.z*sin(joint_angles.left.hip_roll)) + M4*cos(joint_angles.left.hip_yaw)*(C4.y*cos(joint_angles.left.hip_pitch) - C4.z*sin(joint_angles.left.hip_pitch)) - M4*sin(joint_angles.left.hip_yaw)*(C4.x*cos(joint_angles.left.hip_roll) + sin(joint_angles.left.hip_roll)*(C4.z*cos(joint_angles.left.hip_pitch) + C4.y*sin(joint_angles.left.hip_pitch))) + M5*cos(joint_angles.left.hip_yaw)*(C5.y*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) + L4*sin(joint_angles.left.hip_pitch) - C5.z*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch)) - M5*sin(joint_angles.left.hip_yaw)*(C5.x*cos(joint_angles.left.hip_roll) + sin(joint_angles.left.hip_roll)*((-L4)*cos(joint_angles.left.hip_pitch) + C5.z*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) + C5.y*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch))) + M6*cos(joint_angles.left.hip_yaw)*(C6.y*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch) + L4*sin(joint_angles.left.hip_pitch) + L5*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) - C6.z*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch)) - M6*sin(joint_angles.left.hip_yaw)*(C6.x*cos(joint_angles.left.hip_roll) + sin(joint_angles.left.hip_roll)*((-L4)*cos(joint_angles.left.hip_pitch) - L5*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) + C6.z*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch) + C6.y*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch))) + M2*(C2.y*cos(joint_angles.right.hip_yaw) + C2.x*sin(joint_angles.right.hip_yaw)) - M3*sin(joint_angles.right.hip_yaw)*(C3.x*cos(joint_angles.right.hip_roll) + C3.z*sin(joint_angles.right.hip_roll)) + M4*cos(joint_angles.right.hip_yaw)*(C4.y*cos(joint_angles.right.hip_pitch) - C4.z*sin(joint_angles.right.hip_pitch)) - M4*sin(joint_angles.right.hip_yaw)*(C4.x*cos(joint_angles.right.hip_roll) + sin(joint_angles.right.hip_roll)*(C4.z*cos(joint_angles.right.hip_pitch) + C4.y*sin(joint_angles.right.hip_pitch))) + M6*cos(joint_angles.right.hip_yaw)*(sin(joint_angles.right.hip_pitch)*(L4 + cos(joint_angles.right.knee_pitch)*(L5 - C6.y*sin(joint_angles.right.ankle_pitch)) + C6.z*sin(joint_angles.right.ankle_pitch)*sin(joint_angles.right.knee_pitch)) - cos(joint_angles.right.hip_pitch)*(C6.z*cos(joint_angles.right.knee_pitch)*sin(joint_angles.right.ankle_pitch) + (-L5 + C6.y*sin(joint_angles.right.ankle_pitch))*sin(joint_angles.right.knee_pitch))) + M6*sin(joint_angles.right.hip_yaw)*((-C6.x)*cos(joint_angles.right.hip_roll) + sin(joint_angles.right.hip_roll)*(cos(joint_angles.right.hip_pitch)*(L4 + cos(joint_angles.right.knee_pitch)*(L5 - C6.y*sin(joint_angles.right.ankle_pitch)) + C6.z*sin(joint_angles.right.ankle_pitch)*sin(joint_angles.right.knee_pitch)) + sin(joint_angles.right.hip_pitch)*(C6.z*cos(joint_angles.right.knee_pitch)*sin(joint_angles.right.ankle_pitch) + (-L5 + C6.y*sin(joint_angles.right.ankle_pitch))*sin(joint_angles.right.knee_pitch)))) + M5*cos(joint_angles.right.hip_yaw)*(C5.y*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + L4*sin(joint_angles.right.hip_pitch) - C5.z*sin(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch)) - M5*sin(joint_angles.right.hip_yaw)*(C5.x*cos(joint_angles.right.hip_roll) + sin(joint_angles.right.hip_roll)*((-L4)*cos(joint_angles.right.hip_pitch) + C5.z*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C5.y*sin(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch))) + M6*cos(joint_angles.right.ankle_pitch)*((-sin(joint_angles.right.hip_yaw))*sin(joint_angles.right.hip_roll)*(C6.z*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + C6.y*sin(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch)) + cos(joint_angles.right.hip_yaw)*(C6.y*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) - C6.z*sin(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch))));      
      CoM_body_frame.z = -((1/MT)*((-C1.z)*M1 - 2*C2.z*M2 + 2*L2*M4 + 2*L2*M5 + C4.x*M4*sin(joint_angles.left.hip_roll) + C5.x*M5*sin(joint_angles.left.hip_roll) + M3*(L2 - C3.z*cos(joint_angles.left.hip_roll) + C3.x*sin(joint_angles.left.hip_roll)) - M4*cos(joint_angles.left.hip_roll)*(C4.z*cos(joint_angles.left.hip_pitch) + C4.y*sin(joint_angles.left.hip_pitch)) + M5*cos(joint_angles.left.hip_roll)*(L4*cos(joint_angles.left.hip_pitch) - C5.z*cos(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) - C5.y*sin(joint_angles.left.hip_pitch + joint_angles.left.knee_pitch)) + (1.0/2.0)*M6*(2*L2 + L4*cos(joint_angles.left.hip_roll - joint_angles.left.hip_pitch) + L4*cos(joint_angles.left.hip_roll + joint_angles.left.hip_pitch) + L5*cos(joint_angles.left.hip_roll - joint_angles.left.hip_pitch - joint_angles.left.knee_pitch) + L5*cos(joint_angles.left.hip_roll + joint_angles.left.hip_pitch + joint_angles.left.knee_pitch) - C6.z*cos(joint_angles.left.hip_roll - joint_angles.left.hip_pitch - joint_angles.left.knee_pitch - joint_angles.left.ankle_pitch) - C6.z*cos(joint_angles.left.hip_roll + joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch) + 2*C6.x*sin(joint_angles.left.hip_roll) + C6.y*sin(joint_angles.left.hip_roll - joint_angles.left.hip_pitch - joint_angles.left.knee_pitch - joint_angles.left.ankle_pitch) - C6.y*sin(joint_angles.left.hip_roll + joint_angles.left.hip_pitch + joint_angles.left.knee_pitch + joint_angles.left.ankle_pitch)) + C4.x*M4*sin(joint_angles.right.hip_roll) + C5.x*M5*sin(joint_angles.right.hip_roll) + M3*(L2 - C3.z*cos(joint_angles.right.hip_roll) + C3.x*sin(joint_angles.right.hip_roll)) - M4*cos(joint_angles.right.hip_roll)*(C4.z*cos(joint_angles.right.hip_pitch) + C4.y*sin(joint_angles.right.hip_pitch)) + M5*cos(joint_angles.right.hip_roll)*(L4*cos(joint_angles.right.hip_pitch) - C5.z*cos(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) - C5.y*sin(joint_angles.right.hip_pitch + joint_angles.right.knee_pitch)) + (1.0/2.0)*M6*(2*L2 + L4*cos(joint_angles.right.hip_roll - joint_angles.right.hip_pitch) + L4*cos(joint_angles.right.hip_roll + joint_angles.right.hip_pitch) + L5*cos(joint_angles.right.hip_roll - joint_angles.right.hip_pitch - joint_angles.right.knee_pitch) - C6.z*cos(joint_angles.right.ankle_pitch - joint_angles.right.hip_roll + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + L5*cos(joint_angles.right.hip_roll + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) - C6.z*cos(joint_angles.right.ankle_pitch + joint_angles.right.hip_roll + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) + 2*C6.x*sin(joint_angles.right.hip_roll) - C6.y*sin(joint_angles.right.ankle_pitch - joint_angles.right.hip_roll + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch) - C6.y*sin(joint_angles.right.ankle_pitch + joint_angles.right.hip_roll + joint_angles.right.hip_pitch + joint_angles.right.knee_pitch))));
      
      Eigen::Vector3d v_CoM_body_frame(CoM_body_frame.x, CoM_body_frame.y, CoM_body_frame.z);
      // Rotate the center of mass of the robot to the world frame
      Eigen::Vector3d v_CoM_world_frame = rotation_matrix * v_CoM_body_frame;
      CoM_world_frame.x = v_CoM_world_frame(0);
      CoM_world_frame.y = v_CoM_world_frame(1);
      CoM_world_frame.z = v_CoM_world_frame(2);

      // Return the center of mass of the robot in the world frame
      return CoM_world_frame;
}

Eigen::Matrix4d Kinematics::computeFootFK(const Joint_Angles &joint_angles, const uint8_t &leg_id)
{
      Eigen::Matrix4d Tbf; // Transformation matrix from base to foot frame computed in Mathematica

      switch (leg_id)
      {
            case LEFT_LEG_ID:
                  Tbf << cos(joint_angles.hip_yaw)*cos(joint_angles.hip_roll), cos(joint_angles.hip_pitch)*cos(joint_angles.ankle_pitch)*(cos(joint_angles.knee_pitch)*sin(joint_angles.hip_yaw) + cos(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*sin(joint_angles.knee_pitch)) + cos(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*(cos(joint_angles.knee_pitch)*cos(joint_angles.ankle_pitch)*sin(joint_angles.hip_pitch) + cos(joint_angles.hip_pitch + joint_angles.knee_pitch)*sin(joint_angles.ankle_pitch)) - sin(joint_angles.hip_yaw)*(cos(joint_angles.ankle_pitch)*sin(joint_angles.hip_pitch)*sin(joint_angles.knee_pitch) + sin(joint_angles.hip_pitch + joint_angles.knee_pitch)*sin(joint_angles.ankle_pitch)), cos(joint_angles.hip_yaw)*cos(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch)*sin(joint_angles.hip_roll) - sin(joint_angles.hip_yaw)*sin(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch), -L1 - cos(joint_angles.hip_yaw)*(L4*cos(joint_angles.hip_pitch) + L5*cos(joint_angles.hip_pitch + joint_angles.knee_pitch) + L6*cos(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch))*sin(joint_angles.hip_roll) + sin(joint_angles.hip_yaw)*(L4*sin(joint_angles.hip_pitch) + L5*sin(joint_angles.hip_pitch + joint_angles.knee_pitch) + L6*sin(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch)),
                        -cos(joint_angles.hip_roll)*sin(joint_angles.hip_yaw), cos(joint_angles.hip_yaw)*cos(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch) - sin(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*sin(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch), (1.0/4.0)*(-cos(joint_angles.hip_yaw - joint_angles.hip_roll - joint_angles.hip_pitch - joint_angles.knee_pitch - joint_angles.ankle_pitch) + cos(joint_angles.hip_yaw + joint_angles.hip_roll - joint_angles.hip_pitch - joint_angles.knee_pitch - joint_angles.ankle_pitch) - cos(joint_angles.hip_yaw - joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch) + cos(joint_angles.hip_yaw + joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch) + 2*sin(joint_angles.hip_yaw - joint_angles.hip_pitch - joint_angles.knee_pitch - joint_angles.ankle_pitch) - 2*sin(joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch)), cos(joint_angles.hip_pitch)*((L4 + L5*cos(joint_angles.knee_pitch) + L6*cos(joint_angles.knee_pitch + joint_angles.ankle_pitch))*sin(joint_angles.hip_yaw)*sin(joint_angles.hip_roll) + cos(joint_angles.hip_yaw)*(L5*sin(joint_angles.knee_pitch) + L6*sin(joint_angles.knee_pitch + joint_angles.ankle_pitch))) + sin(joint_angles.hip_pitch)*(cos(joint_angles.hip_yaw)*(L4 + L5*cos(joint_angles.knee_pitch) + L6*cos(joint_angles.knee_pitch + joint_angles.ankle_pitch)) - sin(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*(L5*sin(joint_angles.knee_pitch) + L6*sin(joint_angles.knee_pitch + joint_angles.ankle_pitch))),
                        -sin(joint_angles.hip_roll), cos(joint_angles.hip_roll)*sin(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch), cos(joint_angles.hip_roll)*cos(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch), -L2 - cos(joint_angles.hip_roll)*(L4*cos(joint_angles.hip_pitch) + L5*cos(joint_angles.hip_pitch + joint_angles.knee_pitch) + L6*cos(joint_angles.hip_pitch + joint_angles.knee_pitch + joint_angles.ankle_pitch)),
                        0, 0, 0, 1;
                  break;
            case RIGHT_LEG_ID:
                  Tbf << cos(joint_angles.hip_yaw)*cos(joint_angles.hip_roll), (1.0/4.0)*(cos(joint_angles.ankle_pitch - joint_angles.hip_yaw - joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) + cos(joint_angles.ankle_pitch + joint_angles.hip_yaw - joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) - cos(joint_angles.ankle_pitch - joint_angles.hip_yaw + joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) - cos(joint_angles.ankle_pitch + joint_angles.hip_yaw + joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) - 2*sin(joint_angles.ankle_pitch - joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch) + 2*sin(joint_angles.ankle_pitch + joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch)), (1.0/2.0)*(-cos(joint_angles.ankle_pitch - joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch) + cos(joint_angles.ankle_pitch + joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch) + 2*cos(joint_angles.hip_yaw)*cos(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch)*sin(joint_angles.hip_roll)), L1 + (L4 + L5*cos(joint_angles.knee_pitch) + L6*cos(joint_angles.ankle_pitch + joint_angles.knee_pitch))*sin(joint_angles.hip_yaw)*sin(joint_angles.hip_pitch) + L6*cos(joint_angles.hip_yaw)*cos(joint_angles.knee_pitch)*sin(joint_angles.ankle_pitch)*sin(joint_angles.hip_roll)*sin(joint_angles.hip_pitch) + L5*cos(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*sin(joint_angles.hip_pitch)*sin(joint_angles.knee_pitch) + L6*cos(joint_angles.ankle_pitch)*cos(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*sin(joint_angles.hip_pitch)*sin(joint_angles.knee_pitch) + cos(joint_angles.hip_pitch)*(cos(joint_angles.knee_pitch)*(L6*sin(joint_angles.ankle_pitch)*sin(joint_angles.hip_yaw) - (L5 + L6*cos(joint_angles.ankle_pitch))*cos(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)) + (L5 + L6*cos(joint_angles.ankle_pitch))*sin(joint_angles.hip_yaw)*sin(joint_angles.knee_pitch) + cos(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*(-L4 + L6*sin(joint_angles.ankle_pitch)*sin(joint_angles.knee_pitch))),
                        -cos(joint_angles.hip_roll)*sin(joint_angles.hip_yaw), (1.0/2.0)*(cos(joint_angles.ankle_pitch - joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch) + cos(joint_angles.ankle_pitch + joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch) - 2*sin(joint_angles.hip_yaw)*sin(joint_angles.hip_roll)*sin(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch)), (1.0/4.0)*(cos(joint_angles.ankle_pitch - joint_angles.hip_yaw - joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) - cos(joint_angles.ankle_pitch + joint_angles.hip_yaw - joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) - cos(joint_angles.ankle_pitch - joint_angles.hip_yaw + joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) + cos(joint_angles.ankle_pitch + joint_angles.hip_yaw + joint_angles.hip_roll + joint_angles.hip_pitch + joint_angles.knee_pitch) - 2*sin(joint_angles.ankle_pitch - joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch) - 2*sin(joint_angles.ankle_pitch + joint_angles.hip_yaw + joint_angles.hip_pitch + joint_angles.knee_pitch)), (L4*cos(joint_angles.hip_pitch) + L5*cos(joint_angles.hip_pitch + joint_angles.knee_pitch) + L6*cos(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch))*sin(joint_angles.hip_yaw)*sin(joint_angles.hip_roll) + cos(joint_angles.hip_yaw)*(L4*sin(joint_angles.hip_pitch) + L5*sin(joint_angles.hip_pitch + joint_angles.knee_pitch) + L6*sin(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch)),
                        -sin(joint_angles.hip_roll), cos(joint_angles.hip_roll)*sin(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch), cos(joint_angles.hip_roll)*cos(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch), -L2 - cos(joint_angles.hip_roll)*(L4*cos(joint_angles.hip_pitch) + L5*cos(joint_angles.hip_pitch + joint_angles.knee_pitch) + L6*cos(joint_angles.ankle_pitch + joint_angles.hip_pitch + joint_angles.knee_pitch)),
                        0, 0, 0, 1;
                  break;
      }
      // Return the transformation matrix from base to foot frame
      return Tbf;
}

Joint_Angles Kinematics::computeFootIK(const Pose &act_foot_pose, const Pose &ref_foot_pose, const Joint_Angles &act_joint_angles, const uint8_t &leg_id)
{
      Eigen::Matrix4d Tbf = pose_to_trans(act_foot_pose); // Transformation matrix from base frame to current foot frame
      Eigen::Matrix4d Tbd = pose_to_trans(ref_foot_pose); // Transformation matrix from base frame to desired foot frame
      Eigen::Matrix4d Tfd = trans_inv(Tbf) * Tbd;         // Transformation matrix from current foot frame to desired foot frame
      Eigen::VectorXd Vf(6);
      Vf = skew_to_twist(Tfd.log()); // Twist vector from current foot frame to desired foot frame
      Eigen::VectorXd Vb(6);
      Vb = trans_to_adj(Tbf) * Vf;          // Twist vector from base frame to desired foot frame
      double epsilon_v = Vb.head(3).norm(); // Error tolerance for linear velocity v
      double epsilon_w = Vb.tail(3).norm(); // Error tolerance for angular velocity w

      iteration_count = 0;                                         // Reset the iteration count
      Joint_Angles computed_joint_angles = act_joint_angles;       // Initial condition for the joint angles is set so that the knee are bent forward
      computed_joint_angles.hip_pitch += 0.3;
      computed_joint_angles.knee_pitch -= 0.3;
      computed_joint_angles.ankle_pitch += 0.2;

      Eigen::MatrixXd Jacobian(6, 5);                              // Initialize the Jacobian matrix
      Eigen::VectorXd delta_joint_angles(5);                       // Initialize the change in joint angles
      // Newton-Raphson method for inverse kinematics
      while ((epsilon_w > EPSILON_W || epsilon_v > EPSILON_V) && iteration_count < MAX_ITERATIONS)
      {
            // Initialize the Jacobian matrix
            switch (leg_id)
            {
            case LEFT_LEG_ID:
                  Jacobian << 0, L2*cos(computed_joint_angles.hip_yaw), (-L2)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw), (-L2)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw) - L4*(cos(computed_joint_angles.hip_pitch)*sin(computed_joint_angles.hip_yaw) + cos(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_pitch)), (-L2)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw) + sin(computed_joint_angles.hip_pitch)*((-cos(computed_joint_angles.hip_yaw))*(L4 + L5*cos(computed_joint_angles.knee_pitch))*sin(computed_joint_angles.hip_roll) + L5*sin(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.knee_pitch)) - cos(computed_joint_angles.hip_pitch)*((L4 + L5*cos(computed_joint_angles.knee_pitch))*sin(computed_joint_angles.hip_yaw) + L5*cos(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.hip_roll)*sin(computed_joint_angles.knee_pitch)),
                              -L1, (-L2)*sin(computed_joint_angles.hip_yaw), (-L2)*cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll) - L1*sin(computed_joint_angles.hip_roll), (-cos(computed_joint_angles.hip_yaw))*(L2*cos(computed_joint_angles.hip_roll) + L4*cos(computed_joint_angles.hip_pitch)) + sin(computed_joint_angles.hip_roll)*(-L1 + L4*sin(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.hip_pitch)), (-cos(computed_joint_angles.hip_yaw))*(L2*cos(computed_joint_angles.hip_roll) + L4*cos(computed_joint_angles.hip_pitch) + L5*cos(computed_joint_angles.hip_pitch + computed_joint_angles.knee_pitch)) + sin(computed_joint_angles.hip_roll)*(-L1 + sin(computed_joint_angles.hip_yaw)*(L4*sin(computed_joint_angles.hip_pitch) + L5*sin(computed_joint_angles.hip_pitch + computed_joint_angles.knee_pitch))),
                              0, (-L1)*cos(computed_joint_angles.hip_yaw), L1*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw), cos(computed_joint_angles.hip_roll)*(L1*sin(computed_joint_angles.hip_yaw) - L4*sin(computed_joint_angles.hip_pitch)), cos(computed_joint_angles.hip_roll)*(L1*sin(computed_joint_angles.hip_yaw) - L4*sin(computed_joint_angles.hip_pitch) - L5*sin(computed_joint_angles.hip_pitch + computed_joint_angles.knee_pitch)),
                              0, sin(computed_joint_angles.hip_yaw), cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll), cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll), cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll),
                              0, cos(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*sin(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*sin(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*sin(computed_joint_angles.hip_yaw),
                              -1, 0, -sin(computed_joint_angles.hip_roll), -sin(computed_joint_angles.hip_roll), -sin(computed_joint_angles.hip_roll);
                  break;
            case RIGHT_LEG_ID:
                  Jacobian << 0, L2*cos(computed_joint_angles.hip_yaw), (-L2)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw), (-L2)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw) - L4*(cos(computed_joint_angles.hip_pitch)*sin(computed_joint_angles.hip_yaw) + cos(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_pitch)), (-L2)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw) + sin(computed_joint_angles.hip_pitch)*((-cos(computed_joint_angles.hip_yaw))*(L4 + L5*cos(computed_joint_angles.knee_pitch))*sin(computed_joint_angles.hip_roll) + L5*sin(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.knee_pitch)) - cos(computed_joint_angles.hip_pitch)*((L4 + L5*cos(computed_joint_angles.knee_pitch))*sin(computed_joint_angles.hip_yaw) + L5*cos(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.hip_roll)*sin(computed_joint_angles.knee_pitch)),
                              L1, (-L2)*sin(computed_joint_angles.hip_yaw), (-L2)*cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll) + L1*sin(computed_joint_angles.hip_roll), (-cos(computed_joint_angles.hip_yaw))*(L2*cos(computed_joint_angles.hip_roll) + L4*cos(computed_joint_angles.hip_pitch)) + sin(computed_joint_angles.hip_roll)*(L1 + L4*sin(computed_joint_angles.hip_yaw)*sin(computed_joint_angles.hip_pitch)), (-cos(computed_joint_angles.hip_yaw))*(L2*cos(computed_joint_angles.hip_roll) + L4*cos(computed_joint_angles.hip_pitch) + L5*cos(computed_joint_angles.hip_pitch + computed_joint_angles.knee_pitch)) + sin(computed_joint_angles.hip_roll)*(L1 + sin(computed_joint_angles.hip_yaw)*(L4*sin(computed_joint_angles.hip_pitch) + L5*sin(computed_joint_angles.hip_pitch + computed_joint_angles.knee_pitch))),
                              0, L1*cos(computed_joint_angles.hip_yaw), (-L1)*cos(computed_joint_angles.hip_roll)*sin(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*(L1*sin(computed_joint_angles.hip_yaw) + L4*sin(computed_joint_angles.hip_pitch)), (-cos(computed_joint_angles.hip_roll))*(L1*sin(computed_joint_angles.hip_yaw) + L4*sin(computed_joint_angles.hip_pitch) + L5*sin(computed_joint_angles.hip_pitch + computed_joint_angles.knee_pitch)),
                              0, sin(computed_joint_angles.hip_yaw), cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll), cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll), cos(computed_joint_angles.hip_yaw)*cos(computed_joint_angles.hip_roll),
                              0, cos(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*sin(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*sin(computed_joint_angles.hip_yaw), (-cos(computed_joint_angles.hip_roll))*sin(computed_joint_angles.hip_yaw),
                              -1, 0, -sin(computed_joint_angles.hip_roll), -sin(computed_joint_angles.hip_roll), -sin(computed_joint_angles.hip_roll); 
                  break;
            }
            // SR Inverse using Levenberg-Marquardt method solved using llt decomposition as in this Ax = b, A is symmetric and positive definite
            delta_joint_angles = (Jacobian.transpose() * Jacobian + LAMBDA * Eigen::MatrixXd::Identity(5, 5)).llt().solve(Jacobian.transpose() * Vb);

            // Update the joint angles
            computed_joint_angles.hip_yaw += delta_joint_angles(0);
            computed_joint_angles.hip_roll += delta_joint_angles(1);
            computed_joint_angles.hip_pitch += delta_joint_angles(2);
            computed_joint_angles.knee_pitch += delta_joint_angles(3);
            computed_joint_angles.ankle_pitch += delta_joint_angles(4);

            // Recompute the foot transformation matrix
            Tbf = computeFootFK(computed_joint_angles, leg_id); // Transformation matrix from base frame to current foot frame
            Tfd = trans_inv(Tbf) * Tbd;                         // Transformation matrix from current foot frame to desired foot frame
            Vf = skew_to_twist(Tfd.log());                      // Twist vector from current foot frame to desired foot frame
            Vb = trans_to_adj(Tbf) * Vf;                        // Twist vector from base frame to desired foot frame
            epsilon_v = Vb.head(3).norm();                      // Error tolerance for linear velocity v
            epsilon_w = Vb.tail(3).norm();                      // Error tolerance for angular velocity w

            iteration_count++; // Increment the iteration count
      }
      //std::cout << "Number of iterations: " << iteration_count << std::endl;

      return computed_joint_angles;
}
